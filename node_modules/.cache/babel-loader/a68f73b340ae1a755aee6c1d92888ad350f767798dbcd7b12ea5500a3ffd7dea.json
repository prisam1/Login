{"ast":null,"code":"const itineraryModel = require(\"../model/itineraryModel\");\nconst user = require(\"../model/userModel\");\nconst {\n  checkInputsPresent,\n  isValidNumber,\n  isValid,\n  isValidObjectId\n} = require(\"../valid/valid\");\nconst {\n  login\n} = require(\"../controller/userController\");\nconst moment = require('moment');\nconst createitinarary = async function (req, res) {\n  try {\n    if (!checkInputsPresent(req.body)) return res.status(400).send({\n      status: false,\n      message: \"Enter details to create your account\"\n    });\n    const {\n      userId,\n      name,\n      from,\n      to,\n      date,\n      location,\n      duration,\n      hotelName,\n      totalcost\n    } = req.body;\n    if (!isValidObjectId(userId)) return res.status(400).send({\n      status: false,\n      message: \"Please provide valid UserId\"\n    });\n    let date1 = moment(from);\n    let date2 = moment(to);\n    let date3 = moment(date);\n    if (!isValid(date1)) return res.status(400).send({\n      status: false,\n      message: \"Date is required\"\n    });\n    if (!isValid(date2)) return res.status(400).send({\n      status: false,\n      message: \"Date is required\"\n    });\n    if (!isValid(date3)) return res.status(400).send({\n      status: false,\n      message: \"Date is required\"\n    });\n    if (!isValid(name)) return res.status(400).send({\n      status: false,\n      message: \"Name is required\"\n    });\n    if (!isValid(duration)) return res.status(400).send({\n      status: false,\n      message: \"Duration is required\"\n    });\n    if (!isValid(location)) return res.status(400).send({\n      status: false,\n      message: \"Location is required\"\n    });\n    if (!isValid(hotelName)) return res.status(400).send({\n      status: false,\n      message: \"Hotel Name is required\"\n    });\n    if (!isValid(totalcost)) return res.status(400).send({\n      status: false,\n      message: \"Totalcost is required\"\n    });\n    let result = await itineraryModel.create(req.body);\n    res.status(201).send({\n      status: true,\n      message: \"Successfully Created\",\n      data: result\n    });\n  } catch (err) {\n    return res.status(500).send({\n      status: false,\n      message: err.message\n    });\n  }\n};\nconst itinararyupdate = async function (req, res) {\n  try {\n    let {\n      userId,\n      name,\n      from,\n      to,\n      date,\n      location,\n      duration,\n      hotelName,\n      totalcost\n    } = req.body;\n    if (!isValidObjectId(userId)) return res.status(400).send({\n      status: false,\n      message: \"Please provide valid UserId\"\n    });\n    if (from || from === \"\") {\n      if (!isValid(from)) return res.status(400).send({\n        status: false,\n        message: \"Date should be Required\"\n      });\n    }\n    if (to || to === \"\") {\n      if (!isValid(to)) return res.status(400).send({\n        status: false,\n        message: \"Date should be Required\"\n      });\n    }\n    if (name || name === \"\") {\n      if (!isValid(name)) return res.status(400).send({\n        status: false,\n        message: \"Name should be Required\"\n      });\n    }\n    let date1 = moment(from);\n    let date2 = moment(to);\n    if (!isValid(date1) && !date.isValid(date2)) return res.status(400).send({\n      status: false,\n      message: \"Please provide valid date\"\n    });\n    if (date || date === \"\") {\n      if (!isValid(date)) return res.status(400).send({\n        status: false,\n        message: \"Date is required\"\n      });\n    }\n    if (location || location === \"\") {\n      if (!isValid(location)) return res.status(400).send({\n        status: false,\n        message: \"Location is required\"\n      });\n    }\n    if (duration || duration === \"\") {\n      if (!isValid(duration)) return res.status(400).send({\n        status: false,\n        message: \"Duration is required\"\n      });\n    }\n    if (hotelName || hotelName === \"\") {\n      if (!isValid(hotelName)) return res.status(400).send({\n        status: false,\n        message: \"Hotel Name is required\"\n      });\n    }\n    if (totalcost || totalcost === \"\") {\n      if (!isValid(totalcost)) return res.status(400).send({\n        status: false,\n        message: \"Totalcost is required\"\n      });\n    }\n    let update = await itineraryModel.findByIdAndUpdate({\n      _id: userId\n    }, {\n      ...req.body\n    }, {\n      new: true\n    });\n    res.status(200).send({\n      status: true,\n      message: \"Successfully Update\",\n      data: update\n    });\n  } catch (err) {\n    return res.status(500).send({\n      status: false,\n      message: err.message\n    });\n  }\n};\nconst itinararyget = async function (req, res) {\n  try {\n    //   if(!isValidObjectId(user))\n    //      return res.status(400).send({ status: false, message: \"Please provide valid UserId\"})\n\n    let get = await itineraryModel.find();\n    res.status(200).send({\n      status: true,\n      message: \"done\",\n      data: get\n    });\n  } catch (err) {\n    return res.status(500).send({\n      status: false,\n      message: err.message\n    });\n  }\n};\nmodule.exports = {\n  createitinarary,\n  itinararyupdate,\n  itinararyget\n};","map":{"version":3,"names":["itineraryModel","require","user","checkInputsPresent","isValidNumber","isValid","isValidObjectId","login","moment","createitinarary","req","res","body","status","send","message","userId","name","from","to","date","location","duration","hotelName","totalcost","date1","date2","date3","result","create","data","err","itinararyupdate","update","findByIdAndUpdate","_id","new","itinararyget","get","find","module","exports"],"sources":["D:/Projects/Login/src/controller/itinararyController.js"],"sourcesContent":["\nconst itineraryModel= require(\"../model/itineraryModel\")\nconst user= require(\"../model/userModel\")\nconst {checkInputsPresent,isValidNumber,isValid,isValidObjectId} =require(\"../valid/valid\")\nconst {login}= require(\"../controller/userController\")\nconst moment = require('moment')\n\n\nconst createitinarary = async function(req,res)\n{\ntry{ \n  if(!checkInputsPresent(req.body))\n     return res.status(400).send({status: false,message: \"Enter details to create your account\"})\n\n  const {userId,name,from,to,date,location,duration,hotelName,totalcost}=req.body  \n   \n  if(!isValidObjectId(userId))\n     return res.status(400).send({ status: false, message: \"Please provide valid UserId\"})\n\n  let date1 = moment(from)\n  let date2= moment(to)\n  let date3= moment(date)\n  if(!isValid(date1))\n     return res.status(400).send({ status: false, message: \"Date is required\"})\n\n  if(!isValid(date2))\n     return res.status(400).send({ status: false, message: \"Date is required\"})\n\n  if(!isValid(date3))\n     return res.status(400).send({ status: false, message: \"Date is required\"})\n \n  if(!isValid(name))\n     return res.status(400).send({ status: false, message: \"Name is required\"})\n\n  if(!isValid(duration))\n     return res.status(400).send({ status: false, message: \"Duration is required\"})\n\n  if(!isValid(location))\n     return res.status(400).send({ status: false, message: \"Location is required\"})\n   \n  if(!isValid(hotelName))\n  return res.status(400).send({ status: false, message: \"Hotel Name is required\"})\n \n  if(!isValid(totalcost))\n     return res.status(400).send({ status: false, message: \"Totalcost is required\"})\n\n  let result=await itineraryModel.create(req.body)\n\n  res.status(201).send({status:true,message:\"Successfully Created\",data:result})\n\n}\n\ncatch(err)\n{\n   return res.status(500).send({ status: false, message: err.message })\n}\n}\n\nconst itinararyupdate = async function(req,res)\n{\ntry{ \n           \n  \n      \n  let {userId,name,from,to,date,location,duration,hotelName,totalcost}=req.body  \n \n  \n    \n  if(!isValidObjectId(userId))\n     return res.status(400).send({ status: false, message: \"Please provide valid UserId\"})\n\nif (from || from === \"\")   \n { \n   if(!isValid(from))\n     return res.status(400).send({ status: false, message: \"Date should be Required\"})  \n }\n\n if (to || to === \"\")\n { \n   if(!isValid(to))\n   return res.status(400).send({ status: false, message: \"Date should be Required\"})  \n}\nif (name || name === \"\")\n{ \n  if(!isValid(name))\n  return res.status(400).send({ status: false, message: \"Name should be Required\"})\n  \n}\n \n  let date1 = moment(from)\n  let date2= moment(to)\n  if(!isValid(date1) && !date.isValid(date2))\n     return res.status(400).send({ status: false, message: \"Please provide valid date\"})\n\nif (date || date === \"\")\n{  if(!isValid(date))\n     return res.status(400).send({ status: false, message: \"Date is required\"})\n \n}\nif (location || location === \"\")     \n { if(!isValid(location))\n     return res.status(400).send({ status: false, message: \"Location is required\"})\n }\nif (duration || duration === \"\")\n{ if(!isValid(duration))\n     return res.status(400).send({ status: false, message: \"Duration is required\"})\n}\n\nif (hotelName || hotelName === \"\")\n{ if(!isValid(hotelName))\n     return res.status(400).send({ status: false, message: \"Hotel Name is required\"})\n}\nif (totalcost || totalcost === \"\")\n{  \n   if(!isValid(totalcost))\n     return res.status(400).send({ status: false, message: \"Totalcost is required\"})   \n \n} \n  let update=await itineraryModel.findByIdAndUpdate({_id:userId},{...req.body},{new:true})\n\n  res.status(200).send({status:true,message:\"Successfully Update\",data:update})\n\n}\n\ncatch(err)\n{\n\n   return res.status(500).send({ status: false, message: err.message })\n}\n}\n\nconst itinararyget= async function(req,res)\n{\ntry{ \n   \n  \n//   if(!isValidObjectId(user))\n//      return res.status(400).send({ status: false, message: \"Please provide valid UserId\"})\n\n  let get=await itineraryModel.find()\n\n  res.status(200).send({status:true,message:\"done\",data:get})\n\n}\n\ncatch(err)\n{\n\n   return res.status(500).send({ status: false, message: err.message })\n}\n}\n\n\nmodule.exports={createitinarary,itinararyupdate,itinararyget}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}