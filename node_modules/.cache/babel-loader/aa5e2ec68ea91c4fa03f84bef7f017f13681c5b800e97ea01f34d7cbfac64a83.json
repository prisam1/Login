{"ast":null,"code":"const userModel = require(\"../model/userModel\");\nconst bcrypt = require(\"bcrypt\");\nconst jwt = require('jsonwebtoken');\nconst {\n  checkInputsPresent,\n  isValid,\n  isValidName,\n  isValidMobile,\n  validateEmail,\n  validPassword\n} = require(\"../valid/valid\");\nconst register = async function (req, res) {\n  try {\n    if (!checkInputsPresent(req.body)) return res.status(400).send({\n      status: false,\n      message: \"Enter details\"\n    });\n    let {\n      name,\n      email,\n      phone,\n      password\n    } = req.body;\n    if (!isValid(name)) return res.status(400).send({\n      status: false,\n      message: \"Name is required\"\n    });\n    if (!isValidName(name)) return res.status(400).send({\n      status: false,\n      message: \"Enter Valid Name\"\n    });\n    if (!isValid(email)) return res.status(400).send({\n      status: false,\n      message: \"Email is required\"\n    });\n    if (!validateEmail(email)) return res.status(400).send({\n      status: false,\n      message: \"Enter Valid Email\"\n    });\n    if (!isValid(phone)) return res.status(400).send({\n      status: false,\n      message: \"Phone Number is required\"\n    });\n    if (!isValidMobile(phone)) return res.status(400).send({\n      status: false,\n      message: \"Enter a Valid Phone Number\"\n    });\n    if (!isValid(password)) return res.status(400).send({\n      status: false,\n      message: \"Password is required\"\n    });\n    if (!validPassword(password)) return res.status(400).send({\n      status: false,\n      message: \"Enter Valid Password\"\n    });\n    req.body.password = await bcrypt.hash(req.body.password, 10);\n    let userdata = await userModel.create(req.body);\n    return res.status(201).send({\n      status: true,\n      Message: \"Successful\",\n      data: userdata\n    });\n  } catch (err) {\n    console.log(err);\n    return res.status(500).send({\n      status: false,\n      message: err.message\n    });\n  }\n};\nconst loginUser = async function (req, res) {\n  try {\n    let data = req.body;\n    if (!checkInputsPresent(data)) return res.status(400).send({\n      status: false,\n      msg: \"Email and Password is Requierd\"\n    });\n    const {\n      email,\n      password\n    } = data;\n    if (!email) return res.status(400).send({\n      status: false,\n      msg: \"User Email is Requierd\"\n    });\n    if (!password) return res.status(400).send({\n      status: false,\n      msg: \"User Password is Requierd\"\n    });\n    if (!validateEmail(email)) return res.status(400).send({\n      status: false,\n      msg: \"Enter Valid Email Id\"\n    });\n    let user = await userModel.findOne({\n      email\n    });\n    if (!user) return res.status(400).send({\n      status: false,\n      msg: \"User not Exist\"\n    });\n    let actualPassword = await bcrypt.compare(password, user.password);\n    if (!actualPassword) return res.status(400).send({\n      status: false,\n      msg: \"Incorrect password\"\n    });\n    let token = jwt.sign({\n      userId: user._id,\n      name: user.name\n    }, \"blank\", {\n      expiresIn: \"2d\"\n    });\n    return res.status(200).send({\n      status: true,\n      message: \"User login successfully\",\n      data: {\n        userId: user._id,\n        name: user.name,\n        token: token\n      }\n    });\n  } catch (err) {\n    return res.status(500).send({\n      status: false,\n      msg: err.message\n    });\n  }\n};\nmodule.exports = {\n  registeruser,\n  loginUser\n};","map":{"version":3,"names":["userModel","require","bcrypt","jwt","checkInputsPresent","isValid","isValidName","isValidMobile","validateEmail","validPassword","register","req","res","body","status","send","message","name","email","phone","password","hash","userdata","create","Message","data","err","console","log","loginUser","msg","user","findOne","actualPassword","compare","token","sign","userId","_id","expiresIn","module","exports","registeruser"],"sources":["D:/Projects/Login/src/controller/userController.js"],"sourcesContent":["const userModel = require(\"../model/userModel\")\nconst bcrypt = require(\"bcrypt\")\nconst jwt = require('jsonwebtoken')\n\nconst {checkInputsPresent,isValid,isValidName,isValidMobile,validateEmail,validPassword} =require(\"../valid/valid\")\n\nconst register= async function(req,res)\n{\n  try{\n       if(!checkInputsPresent(req.body))\n           return res.status(400).send({status: false,message: \"Enter details\"})\n\n          let {name,email,phone,password}=req.body     \n\n        if(!isValid(name))\n          return res.status(400).send({ status: false, message: \"Name is required\" })\n\n        if(!isValidName(name))\n          return res.status(400).send({ status: false, message: \"Enter Valid Name\" })\n\n        if(!isValid(email))\n          return res.status(400).send({ status: false, message: \"Email is required\" })\n\n        if(!validateEmail(email))\n          return res.status(400).send({ status: false, message: \"Enter Valid Email\" })\n        \n        if(!isValid(phone))\n          return res.status(400).send({ status: false, message: \"Phone Number is required\" })\n\n        if(!isValidMobile(phone))\n          return res.status(400).send({ status: false, message: \"Enter a Valid Phone Number\" })  \n\n        if(!isValid(password))\n          return res.status(400).send({ status: false, message: \"Password is required\" })\n\n        if(!validPassword(password))\n          return res.status(400).send({ status: false, message: \"Enter Valid Password\" })\n\n        req.body.password = await bcrypt.hash(req.body.password, 10)\n    \n\n       let userdata= await userModel.create(req.body)\n          \n       return res.status(201).send({status:true,Message:\"Successful\",data:userdata})    \n\n  }\n\n  catch(err)\n  {\n    console.log(err)\n    return res.status(500).send({status: false, message: err.message})\n  }\n\n\n}\n\nconst loginUser = async function (req, res) {\n  try {\n    let data = req.body\n    if (!checkInputsPresent(data))\n      return res.status(400).send({ status: false, msg: \"Email and Password is Requierd\" })\n\n    const { email, password } = data\n\n    if (!email)\n      return res.status(400).send({ status: false, msg: \"User Email is Requierd\" })\n\n    if (!password)\n      return res.status(400).send({ status: false, msg: \"User Password is Requierd\" })\n\n    if (!validateEmail(email))\n      return res.status(400).send({ status: false, msg: \"Enter Valid Email Id\" })\n\n    let user = await userModel.findOne({ email })\n    if (!user)\n      return res.status(400).send({ status: false, msg: \"User not Exist\" })\n\n    let actualPassword = await bcrypt.compare(password, user.password)\n\n    if (!actualPassword)\n      return res.status(400).send({ status: false, msg: \"Incorrect password\" })\n\n\n    let token = jwt.sign({ userId: user._id, name:user.name }, \"blank\", {\n      expiresIn: \"2d\",\n    })\n  \n    return res.status(200).send({status: true, message: \"User login successfully\",\n        data: { userId: user._id, name:user.name, token: token },\n      })\n  } catch (err) {\n    return res.status(500).send({ status: false, msg: err.message })\n  }\n}\n \nmodule.exports={registeruser,loginUser}\n\n \n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}